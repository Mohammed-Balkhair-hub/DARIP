darip/
├─ README.md                         # Project overview and documentation
├─ .gitignore                        # Git ignore patterns
├─ docker-compose.yml                # Docker compose for local development
├─ summary.txt                       # Original project plan and roadmap
├─ project-structure.txt             # This file - project structure overview
│
├─ data/                             # Pipeline inputs/outputs (gitignored)
│  ├─ feeds/
│  │  ├─ allowlist_feeds.json        # RSS feed sources with topic tags
│  │  ├─ all_resources.json          # Extended resource list
│  │  └─ background_briefs.json      # Optional: context for RAG
│  ├─ cache/                         # Temporary fetch artifacts
│  │  └─ YYYY-MM-DD/                 # Daily cache
│  └─ outputs/                       # Generated outputs by date
│     └─ YYYY-MM-DD/                 # One folder per run
│        ├─ raw_items.json           # Step 1: Collected articles (~1300-1500)
│        ├─ queried_news.json        # Step 3: RAG-selected articles (30)
│        ├─ podcast_script/          # Step 4: Script generation outputs
│        │  ├─ headliners.json       # Node 1: Condensed headlines
│        │  ├─ sequenced.json        # Node 2: Reordered articles
│        │  ├─ script_lines.jsonl    # Node 3: TTS-ready dialogue
│        │  └─ script_lines_polished.jsonl  # Node 4: Polished script
│        └─ _logs/                   # Processing logs and metrics
│
├─ scripts/                          # Development scripts
│  └─ entrypoint.sh                  # Container entrypoint
│
├─ orchestrator/                     # Core AI pipeline (Python)
│  ├─ run_daily.py                   # Entry point: runs pipeline end-to-end
│  ├─ server.py                      # Dev server: POST /run triggers pipeline
│  ├─ requirements.txt               # Python dependencies
│  ├─ Dockerfile                     # Container image definition
│  │
│  ├─ config/
│  │  ├─ settings.py                 # All configuration (env vars, paths, settings)
│  │  └─ queries.json                # RAG query definitions (19 queries)
│  │
│  ├─ agents/                        # Pipeline agents (orchestrators)
│  │  ├─ collector.py                # Step 1: RSS collection
│  │  ├─ fulltext_enricher.py        # Step 2: Full-text extraction (LangGraph)
│  │  ├─ rag_retriever.py            # Step 3: RAG-based article selection
│  │  └─ script_writer.py            # Step 4: Script generation (LangGraph orchestrator)
│  │
│  ├─ script_writer_agent/           # Script generation nodes
│  │  ├─ README.md                   # Complete documentation
│  │  ├─ headliner.py                # Node 1: Extract headlines
│  │  ├─ sequencer.py                # Node 2: Reorder for flow
│  │  ├─ duo_script.py               # Node 3: Generate dialogue lines
│  │  └─ naturalizer.py              # Node 4: Polish for naturalness
│  │
│  ├─ extractors/                    # Full-text extraction utilities
│  │  ├─ README.md                   # Extraction documentation
│  │  ├─ robots_checker.py           # robots.txt compliance
│  │  ├─ html_fetcher.py             # HTTP fetch with rate limiting
│  │  └─ text_extractor.py           # Multi-library text extraction
│  │
│  └─ rag/                           # RAG retrieval utilities
│     ├─ README.md                   # RAG documentation
│     ├─ chunker.py                  # Text chunking
│     ├─ embedder.py                 # Embedding generation
│     ├─ indexer.py                  # FAISS indexing
│     ├─ scorer.py                   # Hybrid scoring (BM25 + semantic)
│     └─ mmr.py                      # MMR diversity selection
│
└─ site/                             # Static website (future)
   └─ public/
      ├─ index.html                  # Landing page
      ├─ today.html                  # Today's episode player
      ├─ archive.html                # Past episodes
      └─ assets/                     # CSS, JS, audio, images, JSON